{%- assign grid_count = 0 -%}
{%- paginate collection.products by pagination -%}
{%- for product in collection.products -%}
  {%- liquid
    assign matched_product_option = nil
    assign color_label_list = 'general.label.color' | t | replace: ', ', ',' | downcase | split: ','
    
    # First, we try to find an option named explicitly "color" in the store's language
    for color_label in color_label_list
      if product.options_by_name[color_label] != blank
        assign matched_product_option = product.options_by_name[color_label]
        break
      endif
    endfor
  
    # If we didn't find an option named "color", we try to find an option that has swatches, as this is probably
    # the color option that the merchant want to use for swatches
    if matched_product_option == blank
      for product_option in product.options_with_values
        assign values_with_swatch = product_option.values | where: 'swatch'
  
        if values_with_swatch.size > 0
          assign matched_product_option = product_option
          break
        endif
      endfor
    endif
  -%}
  {%- if matched_product_option != blank -%}
    {%- for option_value in matched_product_option.values -%}
      {%- for variant in product.variants -%}
        {% assign variant_selc = variant.title | split: '/' %}
        {% assign variant_valname = variant_selc[0] | handleize %}
        {% assign option_value_sel = option_value | handleize %}
        
        {% if variant_valname == option_value_sel %}
          {%- assign grid_count = grid_count | plus: 1 -%}
          {% break %}
        {%- endif -%}
        
      {%- endfor -%}
    {%- endfor -%}
  {%- else -%}
    {%- assign grid_count = grid_count | plus: 1 -%}
  {%- endif -%}
{%- endfor -%}
{%- endpaginate -%}
{{ grid_count }}